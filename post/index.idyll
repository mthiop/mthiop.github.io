

[meta title:"Potential Fields" description:"Pfadplanung mit Potential Fields" /]


[Header
  title:"Pfadplanung mit Potential Fields"
  subtitle:""
  author:"" /]

[Aside]
[CustomD3Component className:"d3-component" rep_factor:20 attr_factor:20 state:0 step_size:10 influence_range:100 movable_objects:0 /]
[/Aside]

## Abstract

Diese Seite ist im Rahmen des Kurses **Data Visualization** an der Freien
Universität Berlin entstanden. Aufgabe war es einen Algorithmus zu erklären und
zu visualisieren, wobei Informatikstudenten im ersten Semester für das
Studium motiviert werden sollten.

Die Pfadplanung mit Potentialfelder kommt aus der Robotik. und dient einem Roboter
mit Hilfe von Potentialfelder einen Weg zu einem Ziel zu finden, ohne Kollidierung
mit einem Hinderniss.


## Problembeschreibung


Stell dir vor ein Roboter soll von seinem Startpunkt aus ein Ziel erreichen.
Um dieses Ziel zu erreichen muss der Roboter ohne mit einem Hinderniss zu kollidieren.
Damit der Roboter so wenig Energie wie möglich verbraucht, muss er einen möglichst
kurzen Weg finden. Hier für wird die Pfadplanung, hier mit
der *Potential Fields Methode* eingesetzt.

Bei dieser Methode werden einfache physikalische Kräfte verwendet.
Diese berechneten Kräfte bzw. Potentiale weisen den Roboter zum Ziel hin. Das Ziel
zieht den Roboter an und die Hindernisse stoßen ihn ab.

.

TODO

## Der Algorithmus

[Aside]
[var name:"state" value: 0 /]
[CustomD3Component className:"d3-component" rep_factor:20 attr_factor:20 state:state step_size:10 influence_range:100 movable_objects:1 /]
[button onClick:`state++`]
Toggle Animation
[/button]
[/Aside]


Der Algorithmus Potential Fields nutzt einfache physikalische Elemente zur Wegfindung
zum Ziel und Vermeidung von Kollision mit eiem Hindernis. Das Ziel hat anziehende Kräfte, daher
wird der Roboter dorthin gezogen. Die Hindernisse umgeht der Roboter, da diese
abstoßende Kräfte haben.

In dieser Animation (rechts) kannst du die Posiiton des Roboters (grüner Kreis),
die Hindernisse (Dreiecke) und das Ziel (roter Kreis) ändern und sehen, wie
sich der Roboter verhält.

TODO

TODO

TODO

## Erklärung

Der Roboter wird durch eine Kraft [Equation] F [/Equation] beeinflusst.
Es existiert ein Konfigurationsraum in dem alle anfahrbaren Konfigurationen/Position
enthalten sind.
Der Roboter hat die Konfigurationen [Equation]q_r[/Equation] mit der Gleichung

[Equation]F(q_r)=F_{\text{anziehend}}(q_r)+F_{\text{abstoßend}}(q_r)[/Equation].

Dabei ist
[Equation]F_{\text{anziehend}}[/Equation] die anziehende Kraft des Roboters in eine Richtung,
also das Ziel [Equation]q_z[/Equation], dass der Roboter erreichen soll.

---------

konisch:

[Equation]F_{\text{anziehend}}(q_r)= -\epsilon * \frac{qr-qz}{|qr-qz|}[/Equation]

----------

Damit der Roboter zum Ziel kommt,aber nicht mit möglichen Hinernissen kollidiert,
geht von den Hindernissen die Kraft [Equation]F_{\text{abstoßend}}[/Equation] ab.



Probiere einfach mit den folgenden Reglern aus, wie die einzelnen Paramter
den Roboter, in der Darstellung rechts, beeinflussen.


[Aside]
[var name:"state2" value: 0 /]
[CustomD3Component className:"d3-component" rep_factor:rep_factor attr_factor:attr_factor state:state2 step_size:step_size influence_range:influence_range movable_objects:0 /]
[button onClick:`state2++`]
Toggle Animation
[/button]
[/Aside]

Attraction / Anziehungskraft:

[var name:"attr_factor" value: 20 /]
[Range value: attr_factor min:0.1 max:100 /]

Repulsion / Abstoßungskraft:

[var name:"rep_factor" value:20 /]
[Range value: rep_factor min:0.1 max:100 /]

Influence Range / ?:

[var name:"influence_range" value:100 /]
[Range value: influence_range min:0.1 max:1000 /]

Step size / Schrittgröße:

[var name:"step_size" value:10 /]
[Range value: step_size min:0.1 max:100 /]

//## Besondere Fälle
