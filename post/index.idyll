[div onExitView:`playgroundVisible = 0` onEnterViewFully:`playgroundVisible = 1`]
 [meta title:"Potential Fields" description:"Pfadplanung mit Potential Fields" /]


[Header
  title:"Pfadplanung mit Potential Fields"
  subtitle:""
  author:"" /]

// Variables
[var name:"state" value: 0 /]
[var name:"step_size" value:10/]
[var name:"attr_factor" value: 20 /]
[var name:"rep_factor" value:20 /]
[var name:"influence_range" value:100 /]
[var name:"state2" value: 0 /]
[var name:steps value:50 /]
[var name:"playgroundVisible" value:1 /]
[var name:"forceViz" value:0 /]
[var name:"buttonVisible" value:0 /]

[Fixed]
	[div id:"forceViz"]
			[SmallCustomD3Component className:"d3-component" rep_factor:rep_factor attr_factor:attr_factor state:state step_size:step_size influence_range:influence_range movable_objects:0 /]
	[/div]
	[div id:"buttonPlaceholder"]
		[Button]
		Start/Stop Simulation
		[/Button]
	[/div]
[/Fixed]
[Fixed]
	[CustomD3Component className:"d3-component" rep_factor:rep_factor attr_factor:attr_factor state:state step_size:step_size influence_range:influence_range movable_objects:1 visible:playgroundVisible buttonVisible:buttonVisible /]
	[div id:"button"]
		[Button onClick:`state++`]
		Start/Stop Simulation
		[/Button]
	[/div]
[/Fixed]

## Abstract

Diese Seite ist im Rahmen des Kurses **Data Visualization** an der Freien
Universität Berlin entstanden. Aufgabe war es einen Algorithmus zu erklären und
zu visualisieren, wobei Informatikstudenten im ersten Semester für das
Studium motiviert werden sollten.

Die Pfadplanung mit Potentialfeldern ist ein Algorithmus aus der Robotik. Der Algorithmus plant einem Roboter einen Weg zu einem Ziel. Dabei wird die Kollision mit Hindernissen vermieden.


## Problembeschreibung

Stell dir vor ein Roboter (hier R2D2) soll von seinem Startpunkt aus ein Ziel erreichen.
Auf dem Weg des Roboters liegen jedoch Hindernisse. Gefährliche Kampfdruiden und gemeine Bösewichte wollen den Roboter aufhalten. Daher muss der Roboter einen Weg zum Ziel finden, ohne an eines der Hindernisse zu geraten.

Damit der Roboter so wenig Energie wie möglich verbraucht, muss er einen möglichst
kurzen Weg finden. Hier für wird die Pfadplanung, hier mit
der *Potential Fields Methode* eingesetzt.

Bei dieser Methode werden einfache physikalische Kräfte verwendet.

Diese berechneten Kräfte bzw. Potentiale weisen den Roboter in eine Richtung. Das Ziel
zieht den Roboter an und die Hindernisse stoßen ihn ab. Dadurch sollen Begegnungen mit den Hindernissen vermieden werden.

[div onEnterView:`buttonVisible = 1`]

## Der Algorithmus

[/div]
Der Algorithmus Potential Fields nutzt einfache physikalische Elemente zur Wegfindung
zum Ziel und Vermeidung von Kollision mit einem Hindernis. Das Ziel hat anziehende Kräfte, daher
wird der Roboter dorthin gezogen. Die Hindernisse umgeht der Roboter, da diese
abstoßende Kräfte haben.

Auf der rechten Seite siehst du eine Simulation des Algorithmus. [action onClick:`state++`]Klicke hier, um die Simulation zu starten.[/action] (Du kannst auch den Button unter der Simulation verwenden). Der blaumarkierte Roboter findet einen Weg zum orange markierten Ziel. Du kannst alle Objekte verschieben und an beliebiger Stelle [action onClick:`state++`]pausieren und fortsetzen[/action]. Nutze die Gelegenheit um erste Erfahrungen mit dem Algorithmus zu sammeln. Du kannst dir ein eigenes Szenario mit dem Roboter, den Hindernissen und dem Ziel zusammenbauen.


## Parametererklärung
Anstatt des Szenarios siehst du auf der rechten Seite nun ein vereinfachtes Beispiel mit einem Hindernis.

Wie findet der Roboter den Weg zum Ziel ohne mit Hindernissen zu kollidieren?
Der Roboter wird durch eine Kraft [Equation] F [/Equation] beeinflusst.
Im Bild rechts sieht man einen zweidimensionalen Raum mit allen anfahrbaren Positionen des Roboters. Die Position des Roboters [Equation]q_r[/Equation], bestehend aus einer x- und einer y- Koordinate, berechnet sich durch folgende Gleichung:


[Equation]q_r=\sigma * \frac{F(q_r)}{||F(q_r)||}[/Equation]

Dabei bezeichnet [Equation]\sigma [/Equation] die Schrittlänge des Roboters.
Also kann mit diesem Paramter Einfluss auf die Entfernung, die der Roboter in
einem Planungszyklus durchläuft, genommen werden.
Nach jedem Planungsschritt wird die Position des Roboters neu berechnet.

[/div]
[div onEnterView:`buttonVisible = 1`]

Schauen wir uns nun an wie die Kraft bestimmt wird:

[Equation]F(q_r)=F_{\text{anziehend}}(q_r,q_z)+F_{\text{abstoßend}}(q_r,q_h)[/Equation]

[br /]
[br /]


[Equation]F(q_r)[/Equation] besteht aus zwei Komponenten. Zum einen ist  [Equation]F_{\text{anziehend}(q_r, q_z)}[/Equation] die anziehende Kraft des
Roboters in die Richtung des Ziels. Das Ziel hat dabei die Position
[Equation]q_z[/Equation].
Zum Anderen beschreibt [Equation]F_{\text{abstoßend}(q_r, q_h)}[/Equation] die
abstoßende Kraft des nächsten Hindernisses. Das Hindernis hat dabei die Position [Equation]q_h[/Equation].
Es wird immer nur das Hindernis mit dem kleinsten Abstand zum Roboter betrachtet.


Die anziehende Kraft wird wieder durch zwei Terme berechnet:

[Equation]F_{\text{anziehend}}(q_r, q_z)= -U_{\text{anziehend}}(q_r, q_g) * (q_r - q_z)[/Equation]

[br /]
[br /]

[Equation](q_r - q_z)[/Equation] ist dabei der Richtungsvektor vom Roboter zum Ziel.

Dieser Richtungsvektor wird mit dem Potential [Equation]U_{\text{anziehend}}(q_r, q_z)[/Equation] skaliert:

[Equation]U_{\text{anziehend}}(q_r, q_z)= \epsilon * \frac{1}{||q_r-q_z||}[/Equation]

[br /]
[br /]

Du sieht, dass das Ergebnis nur vom Abstand des Roboters und des Ziels, sowie dem Skalierungsparameter [Equation]\epsilon[/Equation] abhängt.
Das Potential sagt also aus, wie stark der Roboter vom Ziel angezogen wird.
Je größer der Abstand, desto kleiner das Potential.
Der Parameter [Equation]\epsilon[/Equation] verstärkt die anziehende Kraft oder schwächt sie ab.

Diese anziehende Kraft kannst du dir auch wie einen Abhang vorstellen. Das Tal ist das Ziel und das Gefälle die Anziehungskraft. Je stärker die Anziehungskraft desto stärker ist das Gefälle. In der nachfolgenden Ansicht siehst du das Potential der Anziehung.

Mit Verschiebung des Regelers [em]Anziehungskraft [/em] ändert sich der Parameter [Equation]\epsilon[/Equation] die Anziehungskraft des Ziels zum Roboter.
Beobachte wie sich das Gefälle und das Verhalten des Roboters verändert.

[p]
  [em]Anziehungskraft [/em] [Equation]\epsilon[/Equation]
	[Range value:attr_factor min:0 max:100 /]
  [Display value:attr_factor /]
[/p]

[DebugComponentAttr rep_factor:rep_factor attr_factor:attr_factor influence_range:influence_range steps:step_size /]

Damit der Roboter zum Ziel kommt, aber nicht mit möglichen Hinernissen kollidiert, geht von den Hindernissen die Kraft [Equation]F_{\text{abstoßend}}[/Equation] ab.
Auch die abstoßende Kraft ist auch in zwei Terme unterteilt:

[Equation]F_{\text{abstoßend}}(q_r, q_h)= U_{\text{abstoßend}} * (q_r-q_h)[/Equation].

[br /]
[br /]
[Equation](q_r-q_h)[/Equation] ist der Richtungsvektor vom Hindernis zum Roboter, der mit dem Potential [Equation]U_{\text{abstoßend}}(q_r, q_h)[/Equation] skaliert wird:

[Equation]U_{\text{abstoßend}}(q_r, q_h)=\theta * U_{\text{Erkennung}}*U_{\text{Entfernung}} *\frac{1}{||q_r-q_h||}[/Equation]

[br/]
[br/]

Hier stellt θ den Skalierungsparamter dar.

[br/]

[Equation]U_{\text{Entfernung}}=\frac{1}{|q_r - q_h|^2}[/Equation].


[br /]

[Equation]U_{\text{Entfernung}}[/Equation] repräsentiert den Abstand zwischen Roboter und Hindernis:


[Equation]U_{\text{Erkennung}}=(\frac{1}{q_r}-\frac{1}{\phi})[/Equation]

[br /]
[br /]

[Equation]U_{\text{Erkennung}}[/Equation]regelt den Einfluss eines Hindernisses auf den Roboter. Erst wenn der Abstand zwischen Roboter und Hinderniss kleiner als phi ist, wird [Equation]U_{\text{abstoßend}}[/Equation]berechnet. Ist der Abstand kleiner als [Equation]\phi[/Equation] , wird [Equation]U_{\text{Erkennung}}[/Equation] größer, je kleiner der Abstand zwischen Roboter und Hindernis ist. In der Simulation wird ein Hindernis rot markiert, wenn [Equation]\phi[/Equation] kleiner als der Abstand ist.

Ein Hindernis hat neben der abstoßenden Kraft auch einen Einflussbereich, der beeinflusst wann der Roboter durch die abstoßende Kraft beeinflusst wird.

Ähnlich wie mit unserem Abhang für die anziehende Kraft, kannst du dir ein Hindernis als Berg auf einer Ebene vorstellen. Dabei ist die abstoßende Kraft die Steigung und der Einflussbereich die Breite des Berges.

Verschiebe die Regler [em]Abstoßungskraft[/em] und [em]Hindernisseinflussbereich[/em]. Beobachte wie sich die Steigung und die Breite des Berges ändern und wie sich der Roboter zu den Hindernissen verhält.

[p]
  [em]Abstoßungskraft [/em][Equation]\theta[/Equation]
	[Range value:rep_factor min:0 max:100 /]
  [Display value:rep_factor /]
[/p]

[p]
  [em]Hindernisseinflussbereich[/em] [Equation]\phi[/Equation]
	[Range value:influence_range min:1 max:400 /]
  [Display value:influence_range/]
[/p]

[DebugComponentRep rep_factor:rep_factor attr_factor:attr_factor influence_range:influence_range steps:step_size /]



Die Addition der anziehenden Kraft (Abhang) mit der abstoßenden Kraft (Berg) ergibt das Potentialfeld:

[DebugComponent rep_factor:rep_factor attr_factor:attr_factor influence_range:influence_range steps:step_size /]

[/div]

### Parameteranwendung

Hier kannst du noch einmal die Parametern verändern. Beobachte die Veränderung des Potentialfeldes (oben) und wie sich der Roboter in der Simulation verhält:


Wenn du den Regler [em]Schrittgröße[/em] [Equation]\sigma[/Equation] verschiebst, kannst du die Schrittgröße beeinflussen.
Fällt dir ein Problem auf, wenn du den Wert sehr hoch setzt?
[p]
  [em]Schrittgröße [/em][Equation]\sigma[/Equation]
	[Range value: step_size min:6 max:100 /]
  [Display value:step_size /]
[/p]

Wie du vielleicht bemerkt hast, springt der Roboter durch Hindernisse und
überspringt gegegenfalls das Ziel. Das liegt daran, dass der Roboter während
eines Schrittes immer in die gleiche Richtung geht.

[br /]
[div onEnterView:`buttonVisible = 1` onExitViewFully:`forceViz=1;playgroundVisible=0;` onEnterView:`forceViz=0;playgroundVisible=1;`]

Mit der Anziehungskraft kannst du sehen, wie stark der Roboter vom Ziel angezogen wird. Wenn du den Regler erhöhst, wird der Roboter knapper am Hindernis vorbeigehen um schneller ans Ziel zu gelangen.

[p]
  [em]Anziehungskraft [/em] [Equation]\epsilon[/Equation]
	[Range value:attr_factor min:0 max:100 /]
  [Display value:attr_factor /]
[/p]

Das Gegenteil erreichst du mit der Abstoßungskraft:

[p]
  [em]Abstoßungskraft [/em][Equation]\theta[/Equation]
	[Range value:rep_factor min:0 max:100 /]
  [Display value:rep_factor /]
[/p]

Mit dem Hinderniseinflussbereich kannst du verändern, wann der Roboter ein Hindernis bemerkt. Das erkennst du daran, dass das Hindernis rot aufleuchtet.

[p]
  [em]Hinderniseinflussbereich[/em] [Equation]\phi[/Equation]
	[Range value:influence_range min:1 max:400 /]
  [Display value:influence_range/]
[/p]


### Abschließende Worte

Der gezeigte Algorithmus ist auch heute noch relevant.
Falls dein Interesse geweckt ist, gibt es hier noch etwas mehr [link text:"Informationen" url:"http://portal.ku.edu.tr/~cbasdogan/Courses/Robotics/projects/algorithm_poten_field.pdf" /]. Dort wird noch auf die Probleme des Algorithmus und Erweiterungen eingegangen, wobei du die Probleme vielleicht schon während deinen Experimenten bemerkt hast.
Eine Anwendung findest du zum Beispiel im Computerspiel [link text:"StarCraft" url:"https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7063238" /].

[/div]
